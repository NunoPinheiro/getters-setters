const Cc = Components.classes;
const Ci = Components.interfaces;

Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");

function SampleLoginManagerStorage() {}
SampleLoginManagerStorage.prototype = {
  classDescription: "Sample nsILoginManagerStorage implementation",
  contractID: "@example.com/login-manager/storage/sample;1",
  classID: Components.ID("{364a118c-747a-4f6d-ac63-2d2998e5a5c1}"),
  QueryInterface: XPCOMUtils.generateQI([Ci.nsILoginManagerStorage]),

  // This registers the category for overriding the built-in nsILoginManagerStorage
  _xpcom_categories: [
    {
      category: "login-manager-storage",
      entry: "nsILoginManagerStorage"
    }
  ],
  

 // Console logging service, used for debugging.
  __logService : null,
  get _logService() {
    if (!this.__logService)
      this.__logService = Cc["@mozilla.org/consoleservice;1"].
                            getService(Ci.nsIConsoleService);
    return this.__logService;
  },
  log: function (message) {
    dump("SampleLoginManager: " + message + "\n");
    this._logService.logStringMessage("SampleLoginManager: " + message);
  },
  // Logs function name and arguments for debugging
  stub: function(arguments) {
    var args = [];
    for (let i = 0; i < arguments.length; i++)
      args.push(arguments[i])
    this.log("Called " + arguments.callee.name + "(" + args.join(",") + ")");
  },
  searchLogins : function(count, matchData) {
  },
_searchLogins : function (matchData) {},

  init: function SLMS_init() {
    this.stub(arguments);
  },
  initWithFile: function SLMS_initWithFile(aInputFile, aOutputFile) {
    this.stub(arguments);
  },
  addLogin: function SLMS_addLogin(login) {
    this.stub(arguments);
  },
  removeLogin: function SLMS_removeLogin(login) {
    this.stub(arguments);
  },
  modifyLogin: function SLMS_modifyLogin(oldLogin, newLogin) {
    this.stub(arguments);
  },
  getAllLogins: function SLMS_getAllLogins(count) {
    this.stub(arguments);
  },
  removeAllLogins: function SLMS_removeAllLogins() {
    this.stub(arguments);
  },
  getAllDisabledHosts: function SLMS_getAllDisabledHosts(count) {
    this.stub(arguments);
  },
  getLoginSavingEnabled: function SLMS_getLoginSavingEnabled(hostname) {
    this.stub(arguments);
  },
  setLoginSavingEnabled: function SLMS_setLoginSavingEnabled(hostname, enabled) {
    this.stub(arguments);
  },
  findLogins: function SLMS_findLogins(count, hostname, formSubmitURL, httpRealm) {
    this.stub(arguments);
	var loginInfo = Components.classes["@mozilla.org/login-manager/loginInfo;1"]
                .createInstance(Components.interfaces.nsILoginInfo);
	loginInfo.init(hostname, formSubmitURL, httpRealm,  "batata" , "potato", "email", "pass");
	count.value = 1;
	return [loginInfo];
  },
  countLogins: function SLMS_countLogins(aHostname, aFormSubmitURL, aHttpRealm) {
    this.stub(arguments);
    return 1;
  },
	getAllEncryptedLogins : function (count) {
        throw Cr.NS_ERROR_NOT_IMPLEMENTED;
    }
};

var NSGetFactory = XPCOMUtils.generateNSGetFactory([SampleLoginManagerStorage]);

